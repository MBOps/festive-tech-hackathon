
name: 'Terraform, Build and Deploy'

on:
  push:
    branches:
    - main
  pull_request:

env:
  ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
  AZURE_WEBAPP_PACKAGE_PATH: .

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.12.25

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
     
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      continue-on-error: true

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var="subscription_id=${{ secrets.SUBSCRIPTION_ID }}"
    
      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -var="subscription_id=${{ secrets.SUBSCRIPTION_ID }}"

  build-and-deploy:
    name: 'Build and Deploy'
    runs-on: ubuntu-latest
    needs: terraform
    steps:
    # checkout the repo
    - name: 'Checkout GitHub Action' 
      uses: actions/checkout@master
      with:
        repository: 'whaakman/festive-tech-santa-wishlist'
   
    - uses: azure/login@v1
      with:
        creds: '{
          "clientId":"${{ secrets.CLIENT_ID }}",
          "clientSecret":"${{ secrets.CLIENT_SECRET }}",
          "subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}",
          "tenantId":"${{ secrets.TENANT_ID }}"
          }'

    
    - name: Setup Dotnet Core 5.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '5.0'

    - name: 'Run dotnet build'
      shell: bash
      working-directory: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}'
      run: |
        dotnet build --configuration Release
        dotnet publish -c Release -o '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp'
            
    # deploy web app using Azure credentials
    - uses: azure/webapps-deploy@v2
      with:
        app-name: 'Festive-Tech-uks-webapp'
        package: './myapp'

    # Azure logout 
    - name: logout
      run: |
        az logout