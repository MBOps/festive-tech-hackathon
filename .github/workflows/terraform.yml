
name: 'Terraform, Build and Deploy'

on:
  push:
    branches:
    - main
  pull_request:

env:
  ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
  AZURE_WEBAPP_PACKAGE_PATH: .

jobs:
  docker:
    name: 'Docker Build and push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_NAME }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - run: |
          docker build . -t ${{ secrets.REGISTRY_NAME }}/festive-tech:v1
          docker push ${{ secrets.REGISTRY_NAME }}/festive-tech

  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    needs: docker

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    # Checkout the repository to the GitHub Actions runner
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.12.25

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
     
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -var="subscription_id=${{ secrets.SUBSCRIPTION_ID }}" -var="admin_username=${{ secrets.REGISTRY_USERNAME }}" -var="admin_password=${{ secrets.REGISTRY_PASSWORD }}" -var="registry_name=${{ secrets.REGISTRY_NAME }}" -var="tag_name=latest"

      # On push to master, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -var="subscription_id=${{ secrets.SUBSCRIPTION_ID }}" -var="admin_username=${{ secrets.REGISTRY_USERNAME }}" -var="admin_password=${{ secrets.REGISTRY_PASSWORD }}" -var="registry_name=${{ secrets.REGISTRY_NAME }}" -var="tag_name=latest"

  